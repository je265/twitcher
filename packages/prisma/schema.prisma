// Postgres
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  uuid          String         @unique @default(cuid()) // User's login UUID
  email         String?        // Optional email
  name          String?
  image         String?
  role          Role           @default(USER)
  accounts      Account[]
  twitchAccounts TwitchAccount[]
  videos        Video[]        @relation("UploaderVideos")
  streams       Stream[]       @relation("CreatorStreams")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  provider           String
  providerAccountId  String
  access_token       String?
  refresh_token      String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user  User @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model TwitchAccount {
  id                 String   @id @default(cuid())
  userId             String
  displayName        String
  channelId          String   @unique
  // Encrypted stream key blob (AES-GCM). Store nonce+tag too.
  streamKeyCipher    Bytes
  streamKeyNonce     Bytes
  streamKeyTag       Bytes
  ingestServer       String   @default("live.twitch.tv/app")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  streams Stream[]
}

model Video {
  id           String   @id @default(cuid())
  uploaderId   String
  title        String
  description  String   @default("")
  s3Key        String   @unique
  durationSec  Int?
  width        Int?
  height       Int?
  codecVideo   String?  // e.g. h264
  codecAudio   String?  // e.g. aac
  createdAt    DateTime @default(now())

  uploader User @relation("UploaderVideos", fields: [uploaderId], references: [id])
  streams Stream[]
}

model Stream {
  id            String    @id @default(cuid())
  creatorId     String
  twitchAccountId String
  videoId       String
  title         String
  category      String? // "Just Chatting", etc.
  tags          String[] @default([])
  fps           Int      @default(30)
  videoBitrateK Int      @default(2500)
  audioBitrateK Int      @default(160)
  loop          Boolean  @default(false)
  status        StreamStatus @default(DRAFT)
  // scheduling
  scheduledAt   DateTime?
  startedAt     DateTime?
  endedAt       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  creator       User          @relation("CreatorStreams", fields: [creatorId], references: [id])
  twitchAccount TwitchAccount @relation(fields: [twitchAccountId], references: [id])
  video         Video         @relation(fields: [videoId], references: [id])
  jobs          Job[]
  metrics       StreamMetrics[]
}

enum StreamStatus {
  DRAFT
  QUEUED
  RUNNING
  FINISHED
  FAILED
  CANCELED
}

model Job {
  id         String        @id @default(cuid())
  streamId   String
  queueId    String        // BullMQ job id
  status     JobStatus
  worker     String?       // hostname/worker id
  logS3Key   String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  stream     Stream @relation(fields: [streamId], references: [id])
}

enum JobStatus {
  WAITING
  ACTIVE
  PROGRESS
  COMPLETED
  FAILED
  CANCELED
}

model StreamMetrics {
  id         String   @id @default(cuid())
  streamId   String
  bitrate    Float    // kbps
  timestamp  DateTime
  worker     String?
  createdAt  DateTime @default(now())

  stream     Stream @relation(fields: [streamId], references: [id])
  
  @@index([streamId, timestamp])
}