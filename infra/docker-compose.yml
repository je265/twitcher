services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: twitch
      POSTGRES_USER: twitch
      POSTGRES_PASSWORD: twitch
    ports: ["5432:5432"]
    volumes: [dbdata:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U twitch"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports: ["9000:9000", "9001:9001"]
    volumes: [miniodata:/data]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build:
      context: ..
      dockerfile: ./apps/web/Dockerfile
    environment:
      - DATABASE_URL=postgresql://twitch:twitch@db:5432/twitch
      - REDIS_URL=redis://redis:6379
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minio
      - S3_SECRET_KEY=minio123
      - S3_BUCKET_NAME=twitcher-videos
      - S3_REGION=us-east-1
      - NEXTAUTH_SECRET=twitcher-super-secret-key-change-in-production
      - NEXTAUTH_URL=http://localhost:3000
      - WORKER_TOKEN=twitcher-worker-secret-token
      - STREAMKEY_ENC_KEY=dHdpdGNoZXItZGVmYXVsdC1rZXktMzItYnl0ZXMtbG9uZw==
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports: ["3000:3000"]
    volumes:
      - ../apps/web:/app
      - /app/node_modules
      - /app/.next

  worker:
    build:
      context: ..
      dockerfile: ./apps/python-worker/Dockerfile
    environment:
      - API_BASE=http://web:3000
      - WORKER_TOKEN=twitcher-worker-secret-token
      - WORKER_ID=docker-worker-1
    depends_on:
      web:
        condition: service_started
    restart: unless-stopped

volumes:
  dbdata:
  miniodata:
